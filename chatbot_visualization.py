
import streamlit as st 
from lida import Manager, TextGenerationConfig , llm  
from dotenv import load_dotenv
import os
import openai
from PIL import Image
from io import BytesIO
import base64
from langchain.chat_models import ChatOpenAI
from langchain_experimental.agents import create_pandas_dataframe_agent
from langchain.agents.agent_types import AgentType
import pandas as pd

load_dotenv()
os.environ['OPENAI_API_KEY'] = ''
openai.api_key = os.environ['OPENAI_API_KEY']

def base64_to_image(base64_string):
    # Decode the base64 string
    byte_data = base64.b64decode(base64_string)
    
    # Use BytesIO to convert the byte data to image
    return Image.open(BytesIO(byte_data))


lida = Manager(text_gen = llm("openai"))
textgen_config = TextGenerationConfig(n=1, temperature=0.5, model="gpt-3.5-turbo-0301", use_cache=True) # l·ªánh n√†y ƒë·ªÉ t·∫°o ra m·ªôt config cho model c·ªßa openAI

menu = st.sidebar.selectbox("Choose an Option", ["Summarize", "Question based Graph","ChatBot","Handling Missing Values"]) # l·ª±a ch·ªçn menu


# n·∫øu ch·ªçn menu l√† Summarize th√¨ s·∫Ω hi·ªÉn th·ªã ra m√†n h√¨nh m·ªôt subheader l√† Summarization of your Data
if menu == "Summarize":
    st.subheader("Summarization of your Data")
    file_uploader = st.file_uploader("Upload your CSV", type="csv") # d·∫°ng .csv
    if file_uploader is not None:
        path_to_save = "filename.csv" # t√™n file
        with open(path_to_save, "wb") as f: # m·ªü file
            f.write(file_uploader.getvalue()) # ghi file
        summary = lida.summarize("filename.csv", summary_method="default", textgen_config=textgen_config) # t√≥m t·∫Øt file csv b·∫±ng g·ªçi h√†m summarize
        st.write(summary) # hi·ªÉn th·ªã ra m√†n h√¨nh
        goals = lida.goals(summary, n=2, textgen_config=textgen_config) # g·ªçi h√†m goals ƒë·ªÉ t·∫°o ra m·ªôt list c√°c m·ª•c ti√™u
        for goal in goals:
            st.write(goal) # hi·ªÉn th·ªã ra m√†n h√¨nh
        i = 0 # g√°n i = 0
        library = "seaborn" # th∆∞ vi·ªán ƒë·ªÉ v·∫Ω bi·ªÉu ƒë·ªì
        textgen_config = TextGenerationConfig(n=1, temperature=0.2, use_cache=True) # t·∫°o ra m·ªôt config cho model c·ªßa openAI
        charts = lida.visualize(summary=summary, goal=goals[i], textgen_config=textgen_config, library=library)   # g·ªçi h√†m visualize ƒë·ªÉ t·∫°o ra bi·ªÉu ƒë·ªì
        img_base64_string = charts[0].raster # chuy·ªÉn bi·ªÉu ƒë·ªì th√†nh d·∫°ng base64
        img = base64_to_image(img_base64_string) # chuy·ªÉn base64 th√†nh h√¨nh ·∫£nh
        st.image(img) # hi·ªÉn th·ªã h√¨nh ·∫£nh ra m√†n h√¨nh

# n·∫øu ch·ªçn menu l√† Question based Graph th√¨ s·∫Ω hi·ªÉn th·ªã ra m√†n h√¨nh m·ªôt subheader l√† Query your Data to Generate Graph        
elif menu == "Question based Graph":
    st.subheader("Query your Data to Generate Graph")
    file_uploader = st.file_uploader("Upload your CSV", type="csv") # d·∫°ng .csv
    if file_uploader is not None:
        df = pd.read_csv(file_uploader)
        if st.checkbox('Show data'): # ƒë·ªçc file csv
            st.write(df)
        path_to_save = "filename1.csv" # t√™n file
        with open(path_to_save, "wb") as f: # m·ªü file
            f.write(file_uploader.getvalue()) # ghi file
         # hi·ªÉn th·ªã ra m√†n h√¨nh
        text_area = st.text_area("Query your Data to Generate Graph", height=200) # t·∫°o ra m·ªôt text area ƒë·ªÉ nh·∫≠p query
        if st.button("Generate Graph"): # n·∫øu nh·∫•n n√∫t Generate Graph
            if len(text_area) > 0: 
                st.info("Your Query: " + text_area) # hi·ªÉn th·ªã ra m√†n h√¨nh query
                lida = Manager(text_gen = llm("openai"))  # t·∫°o ra m·ªôt manager
                textgen_config = TextGenerationConfig(n=1, temperature=0.2, use_cache=True) # t·∫°o ra m·ªôt config cho model c·ªßa openAI
                summary = lida.summarize("filename1.csv", summary_method="default", textgen_config=textgen_config) 
                user_query = text_area
                charts = lida.visualize(summary=summary, goal=user_query, textgen_config=textgen_config)   # g·ªçi h√†m visualize ƒë·ªÉ t·∫°o ra bi·ªÉu ƒë·ªì
                charts[0] 
                image_base64 = charts[0].raster # chuy·ªÉn bi·ªÉu ƒë·ªì th√†nh d·∫°ng base64
                img = base64_to_image(image_base64) # chuy·ªÉn base64 th√†nh h√¨nh ·∫£nh
                st.image(img) # hi·ªÉn th·ªã h√¨nh ·∫£nh ra m√†n h√¨nh
elif menu == "ChatBot":
    st.title("ChatCSV  üí¨")
    file_uploader = st.file_uploader("Upload a CSV file", type="csv")
    if file_uploader is not None:
        df = pd.read_csv(file_uploader)
        if st.checkbox('Show data'): # ƒë·ªçc file csv
            st.write(df)
        path_to_save = "filename1.csv" # t√™n file
        with open(path_to_save, "wb") as f: # m·ªü file
            f.write(file_uploader.getvalue()) # ghi file
            
        user_input = st.text_input(
                "Ask any statistical question related to your CSV"
            )
        llm = llm = ChatOpenAI(model_name='gpt-3.5-turbo-0613', openai_api_key=os.environ['OPENAI_API_KEY']) # t·∫°o ra m·ªôt model chatbot
        agent = create_pandas_dataframe_agent(llm, df, verbose=True, agent_type=AgentType.OPENAI_FUNCTIONS)
        if user_input:
            response = agent.run(user_input)
            st.write(response)

else:
    # s·ª≠ d·ª•ng k·ªπ thu·∫≠t prompt ƒë·ªÉ ƒëi·ªÅn v√†o c√°c gi√° tr·ªã c√≤n thi·∫øu
    st.subheader("Handling missing values")
    file_uploader = st.file_uploader("Upload your CSV", type="csv")
    if file_uploader is not None:
        df = pd.read_csv(file_uploader)
        if st.checkbox('Show data'):
            st.write(df)
        st.write(df.isnull().sum())
        # s·ª≠ d·ª•ng k·ªπ thu·∫≠t prompt ƒë·ªÉ ƒëi·ªÅn v√†o b·∫±ng openai
        prompt = st.text_area("Enter the prompt", height=200)
        llm = llm = ChatOpenAI(model_name='gpt-3.5-turbo-0613', openai_api_key=os.environ['OPENAI_API_KEY']) # t·∫°o ra m·ªôt model chatbot
        agent = create_pandas_dataframe_agent(llm, df, verbose=True, agent_type=AgentType.OPENAI_FUNCTIONS,agent_executor_kwargs={"handle_parsing_errors": True})
        response = agent.run(prompt)
        # n·∫øu agent ƒë√£ fill the missing values th√¨ xu·∫•t ra file
        if response:
            st.write(response)
            st.write("Do you want to save the filled data?")
            if st.button("Save"):
                df.to_csv("filled_data.csv", index=False)
                st.write("Data saved successfully")
                
            st.write("Do you want to see the filled data?")
            if st.button("Yes"):
                st.write(df)
            # xu·∫•t ra file csv m·ªõi
            st.write("Do you want to download the filled data?")
            if st.button("Download"):
                csv = df.to_csv(index=False)
                b64 = base64.b64encode(csv.encode()).decode()
                href = f'<a href="data:file/csv;base64,{b64}" download="filled_data.csv">Download csv file</a>'
                st.markdown(href, unsafe_allow_html=True)




